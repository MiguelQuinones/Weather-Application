{"version":3,"sources":["components/weatherPage.js","components/weatherPageWeek.js","App.js","reportWebVitals.js","index.js"],"names":["weatherPage","props","onChangeCityName","bind","onChangeStateName","handleSubmitEvent","state","cityName","stateName","event","this","setState","target","value","preventDefault","city","xhr","XMLHttpRequest","key","process","REACT_APP_API_KEY","open","onreadystatechange","readyState","status","json","JSON","parse","responseText","console","log","document","getElementById","innerHTML","main","temp","humidity","wind","speed","feels_like","pressure","pressureInHg","Math","round","pressureConverter","visibility","visibilityConverter","weather","icon","description","charAt","toUpperCase","slice","send","error","getWeatherForCity","style","marginTop","onSubmit","className","type","onChange","placeholder","id","colSpan","rowSpan","Component","weatherPageWeek","lat","lon","epochConverter","daily","dt","day","weeklyCall","coord","getCity","epochTime","date","Date","toString","split","App","to","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gTASqBA,E,kDAGlB,WAAaC,GAAS,IAAD,8BAClB,cAAOA,IAGFC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,kBAAoB,EAAKA,kBAAkBF,KAAvB,gBAGzB,EAAKG,MAAQ,CACVC,SAAW,GACXC,UAAY,IAXG,E,oDAgBrB,SAAkBC,GACfC,KAAKC,SAAU,CACZJ,SAAWE,EAAMG,OAAOC,U,+BAK9B,SAAmBJ,GAChBC,KAAKC,SAAU,CACZH,UAAWC,EAAMG,OAAOC,U,+BAK9B,SAAmBJ,GAEhBA,EAAMK,iBA4EZ,SAA4BC,EAAMT,GAE/B,IAEG,IAAIU,EAAM,IAAIC,eACVC,EAAMC,uJAAYC,kBAEtBJ,EAAIK,KAAK,MACD,qDAAuDN,EAAO,IAAMT,EAAQ,UAAYY,EAAM,mBAC9F,GAGRF,EAAIM,mBAAqB,WACrB,GAAuB,IAApBZ,KAAKa,YAAoC,MAAhBb,KAAKc,OAAe,CAC5C,IAAIC,EAAOC,KAAKC,MAAMjB,KAAKkB,cAC3BC,QAAQC,IAAKL,GAGbM,SAASC,eAAgB,YAAaC,UAAYlB,EAAO,KAAOT,EAChEyB,SAASC,eAAgB,YAAaC,UAAYR,EAAKS,KAAKC,KAAO,QACnEJ,SAASC,eAAgB,gBAAiBC,UAAYR,EAAKS,KAAKE,SAAW,IAC3EL,SAASC,eAAgB,YAAaC,UAAYR,EAAKY,KAAKC,MAAQ,OACpEP,SAASC,eAAgB,iBAAkBC,UAAYR,EAAKS,KAAKK,WAAa,QAC9ER,SAASC,eAAgB,gBAAiBC,UAgBxD,SAA4BO,GAEzB,IAAIC,EAA0B,OAAXD,EAInB,OAFAC,EAAiBC,KAAKC,MAAsB,IAAfF,GAAyB,KAEhC,QAtB2CG,CAAmBnB,EAAKS,KAAKM,UACnFT,SAASC,eAAgB,kBAAmBC,UAyB1D,SAA8BpB,GAE3B,IAAIgC,EAAqB,mBAARhC,EAIjB,OAFAgC,EAAeH,KAAKC,MAAoB,IAAbE,GAAuB,KAE9B,MA/B+CC,CAAqBrB,EAAKoB,YAClFd,SAASC,eAAgB,WAAYC,UAAY,8CAAgDR,EAAKsB,QAAQ,GAAGC,KAAO,cACxHjB,SAASC,eAAgB,mBAAoBC,UAAYR,EAAKsB,QAAQ,GAAGE,YAAYC,OAAO,GAAGC,cAAgB1B,EAAKsB,QAAQ,GAAGE,YAAYG,MAAO,GAAM,gBAKhKpC,EAAIqC,OAEP,MAAOC,GACJzB,QAAQC,IAAK,2BAvGbyB,CAJe7C,KAAKJ,MAAMC,SACVG,KAAKJ,MAAME,WAM3BE,KAAKC,SAAS,CACXJ,SAAU,GACVC,UAAW,O,oBAKjB,WACG,OACI,sBAAKgD,MAAO,CAACC,UAAW,IAAxB,UACI,kDACA,uBAAMC,SAAUhD,KAAKL,kBAArB,UACI,sBAAKsD,UAAU,cAAf,UACI,kDACA,uBAAOC,KAAK,OACLD,UAAU,eACV9C,MAAOH,KAAKJ,MAAMC,SAClBsD,SAAUnD,KAAKR,iBACf4D,YAAY,yBACpB,uBAAOF,KAAK,OACJD,UAAU,eACV9C,MAAOH,KAAKJ,MAAME,UAClBqD,SAAUnD,KAAKN,kBACf0D,YAAY,6BAEvB,qBAAKH,UAAU,eAAf,SACG,uBAAOC,KAAK,SAAS/C,MAAM,SAAS8C,UAAU,oBAEjD,qBAAKI,GAAG,gBAAR,SACG,uBAAOJ,UAAU,QAAQH,MAAO,CAACC,UAAW,IAA5C,SACG,kCACG,+BACG,yCACA,oBAAIM,GAAG,WAAWC,QAAQ,IAA1B,kBAEH,+BACG,2CACA,+CACA,4CACA,wCACA,8CACA,4CACA,iDAEH,+BACG,oBAAID,GAAG,UAAUE,QAAQ,IAAzB,eACA,oBAAIF,GAAG,WAAP,gBACA,oBAAIA,GAAG,eAAP,eACA,oBAAIA,GAAG,WAAP,eACA,oBAAIA,GAAG,gBAAP,eACA,oBAAIA,GAAG,eAAP,eACA,oBAAIA,GAAG,iBAAP,kBAEH,6BACG,oBAAIA,GAAG,kBAAkBC,QAAQ,IAAjC,kC,GAnGWE,a,ICFpBC,E,kDAGlB,WAAalE,GAAS,IAAD,8BAClB,cAAOA,IAGFC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,kBAAoB,EAAKA,kBAAkBF,KAAvB,gBAGzB,EAAKG,MAAQ,CACVC,SAAW,GACXC,UAAY,IAXG,E,oDAgBrB,SAAkBC,GACfC,KAAKC,SAAU,CACZJ,SAAWE,EAAMG,OAAOC,U,+BAK9B,SAAmBJ,GAChBC,KAAKC,SAAU,CACZH,UAAWC,EAAMG,OAAOC,U,+BAK9B,SAAmBJ,GAEhBA,EAAMK,iBAqFZ,SAAkBC,EAAMT,GAErB,IAEG,IAAIU,EAAM,IAAIC,eACVC,EAAMC,uJAAYC,kBAEtBJ,EAAIK,KAAK,MACD,qDAAuDN,EAAO,IAAMT,EAAQ,UAAYY,EAAM,mBAC9F,GAGRF,EAAIM,mBAAqB,WACrB,GAAuB,IAApBZ,KAAKa,YAAoC,MAAhBb,KAAKc,OAAe,CAC5C,IAAIC,EAAOC,KAAKC,MAAMjB,KAAKkB,cAG3BG,SAASC,eAAgB,YAAaC,UAAYlB,EAAO,KAAOT,EAmB9E,SAAqB8D,EAAKC,GAEvB,IAEG,IAAIrD,EAAM,IAAIC,eACVC,EAAMC,uJAAYC,kBAGtBJ,EAAIK,KAAK,MACD,uDAAyD+C,EAAM,QAAUC,EAAM,0CAA4CnD,EAAM,mBACjI,GAGRF,EAAIM,mBAAqB,WACrB,GAAuB,IAApBZ,KAAKa,YAAoC,MAAhBb,KAAKc,OAAe,CAC5C,IAAIC,EAAOC,KAAKC,MAAMjB,KAAKkB,cAG3BG,SAASC,eAAgB,cAAeC,UAAYqC,EAAgB7C,EAAK8C,MAAM,GAAGC,IAClFzC,SAASC,eAAgB,cAAeC,UAAYqC,EAAgB7C,EAAK8C,MAAM,GAAGC,IAClFzC,SAASC,eAAgB,gBAAiBC,UAAYqC,EAAgB7C,EAAK8C,MAAM,GAAGC,IACpFzC,SAASC,eAAgB,eAAgBC,UAAYqC,EAAgB7C,EAAK8C,MAAM,GAAGC,IACnFzC,SAASC,eAAgB,eAAgBC,UAAYqC,EAAgB7C,EAAK8C,MAAM,GAAGC,IACnFzC,SAASC,eAAgB,cAAeC,UAAYqC,EAAgB7C,EAAK8C,MAAM,GAAGC,IAClFzC,SAASC,eAAgB,gBAAiBC,UAAYqC,EAAgB7C,EAAK8C,MAAM,GAAGC,IAGpFzC,SAASC,eAAgB,kBAAmBC,UAAYR,EAAK8C,MAAM,GAAGpC,KAAKsC,IAAM,QACjF1C,SAASC,eAAgB,kBAAmBC,UAAYR,EAAK8C,MAAM,GAAGpC,KAAKsC,IAAM,QACjF1C,SAASC,eAAgB,oBAAqBC,UAAYR,EAAK8C,MAAM,GAAGpC,KAAKsC,IAAM,QACnF1C,SAASC,eAAgB,mBAAoBC,UAAYR,EAAK8C,MAAM,GAAGpC,KAAKsC,IAAM,QAClF1C,SAASC,eAAgB,mBAAoBC,UAAYR,EAAK8C,MAAM,GAAGpC,KAAKsC,IAAM,QAClF1C,SAASC,eAAgB,kBAAmBC,UAAYR,EAAK8C,MAAM,GAAGpC,KAAKsC,IAAM,QACjF1C,SAASC,eAAgB,oBAAqBC,UAAYR,EAAK8C,MAAM,GAAGpC,KAAKsC,IAAM,QAGnF1C,SAASC,eAAgB,qBAAsBC,UAAY,8CAAgDR,EAAK8C,MAAM,GAAGxB,QAAQ,GAAGC,KAAO,cAC3IjB,SAASC,eAAgB,qBAAsBC,UAAY,8CAAgDR,EAAK8C,MAAM,GAAGxB,QAAQ,GAAGC,KAAO,cAC3IjB,SAASC,eAAgB,uBAAwBC,UAAY,8CAAgDR,EAAK8C,MAAM,GAAGxB,QAAQ,GAAGC,KAAO,cAC7IjB,SAASC,eAAgB,sBAAuBC,UAAY,8CAAgDR,EAAK8C,MAAM,GAAGxB,QAAQ,GAAGC,KAAO,cAC5IjB,SAASC,eAAgB,sBAAuBC,UAAY,8CAAgDR,EAAK8C,MAAM,GAAGxB,QAAQ,GAAGC,KAAO,cAC5IjB,SAASC,eAAgB,qBAAsBC,UAAY,8CAAgDR,EAAK8C,MAAM,GAAGxB,QAAQ,GAAGC,KAAO,cAC3IjB,SAASC,eAAgB,uBAAwBC,UAAY,8CAAgDR,EAAK8C,MAAM,GAAGxB,QAAQ,GAAGC,KAAO,gBAKrJhC,EAAIqC,OAEP,MAAOC,GACJzB,QAAQC,IAAK,2BA9DL4C,CAJUjD,EAAKkD,MAAMP,IACX3C,EAAKkD,MAAMN,OAQ7BrD,EAAIqC,OAEP,MAAOC,GACJzB,QAAQC,IAAK,2BA9Gb8C,CAJelE,KAAKJ,MAAMC,SACVG,KAAKJ,MAAME,WAM3BE,KAAKC,SAAS,CACXJ,SAAU,GACVC,UAAW,O,oBAKjB,WACG,OACI,sBAAKgD,MAAO,CAACC,UAAW,IAAxB,UACI,mDACA,uBAAMC,SAAUhD,KAAKL,kBAArB,UACI,sBAAKsD,UAAU,cAAf,UACI,kDACA,uBAAOC,KAAK,OACLD,UAAU,eACV9C,MAAOH,KAAKJ,MAAMC,SAClBsD,SAAUnD,KAAKR,iBACf4D,YAAY,yBACpB,uBAAOF,KAAK,OACJD,UAAU,eACV9C,MAAOH,KAAKJ,MAAME,UAClBqD,SAAUnD,KAAKN,kBACf0D,YAAY,6BAEvB,qBAAKH,UAAU,eAAf,SACG,uBAAOC,KAAK,SAAS/C,MAAM,SAAS8C,UAAU,oBAEjD,qBAAKI,GAAG,gBAAR,SACG,uBAAOJ,UAAU,QAAQH,MAAO,CAACC,UAAW,IAA5C,SACG,kCACG,+BACG,yCACA,oBAAIM,GAAG,WAAWC,QAAQ,IAA1B,kBAEH,+BACG,wCACA,oBAAID,GAAG,aAAP,eACA,oBAAIA,GAAG,aAAP,eACA,oBAAIA,GAAG,eAAP,eACA,oBAAIA,GAAG,cAAP,eACA,oBAAIA,GAAG,cAAP,eACA,oBAAIA,GAAG,aAAP,eACA,oBAAIA,GAAG,eAAP,kBAEH,+BACG,gDACA,oBAAIA,GAAG,iBAAP,eACA,oBAAIA,GAAG,iBAAP,eACA,oBAAIA,GAAG,mBAAP,eACA,oBAAIA,GAAG,kBAAP,eACA,oBAAIA,GAAG,kBAAP,eACA,oBAAIA,GAAG,iBAAP,eACA,oBAAIA,GAAG,mBAAP,kBAEH,+BACG,4CACA,oBAAIA,GAAG,oBAAP,eACA,oBAAIA,GAAG,oBAAP,eACA,oBAAIA,GAAG,sBAAP,eACA,oBAAIA,GAAG,qBAAP,eACA,oBAAIA,GAAG,qBAAP,eACA,oBAAIA,GAAG,oBAAP,eACA,oBAAIA,GAAG,sBAAP,mC,GA5GeG,aAmN7C,SAASI,EAAgBO,GAEtB,IAEIC,EAFe,IAAIC,KAAkB,IAAZF,GAELG,WAAWC,MAAM,OAGzC,OAFApD,QAAQC,IAAKgD,GAENA,EAAK,GAAK,IAAMA,EAAK,GAAK,IAAMA,EAAK,GAAK,KAAOA,EAAK,G,UC7LjDI,E,4JAzBb,WACE,OACE,cAAC,IAAD,UACE,sBAAKvB,UAAU,YAAf,UACE,qBAAKA,UAAU,SAAf,SACE,qBAAKA,UAAU,2BAAf,SACE,qBAAIA,UAAU,qBAAd,UACE,oBAAIA,UAAU,cAAd,SACE,cAAC,IAAD,CAAMwB,GAAG,IAAIxB,UAAU,kBAAvB,gCAEF,oBAAIA,UAAU,cAAd,SACE,cAAC,IAAD,CAAMwB,GAAG,UAAUxB,UAAU,kBAA7B,wCAKR,uBACA,cAAC,IAAD,CAAOyB,KAAK,IAAIC,OAAK,EAACC,UAAWtF,IACjC,cAAC,IAAD,CAAOoF,KAAK,UAAUE,UAAWnB,a,GAnBzBD,aCEHqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnE,SAASC,eAAe,SAM1BuD,M","file":"static/js/main.6b3f111c.chunk.js","sourcesContent":["/* This page will display the main info of the application for the current time -- that is, \r\n   the weather for a given city, its temperature, wind speed, and more\r\n*/\r\n\r\n// Import statements\r\nimport React, { Component } from 'react';\r\nimport \"./components.css\";\r\n\r\n// Main class for fetching weather info from API and displaying it to user\r\nexport default class weatherPage extends Component {\r\n   \r\n   // Constructor for the class that handles resetting default values after form submition\r\n   constructor( props ) {\r\n      super( props );\r\n\r\n      // Event handling functions\r\n      this.onChangeCityName = this.onChangeCityName.bind( this );\r\n      this.onChangeStateName = this.onChangeStateName.bind( this );\r\n      this.handleSubmitEvent = this.handleSubmitEvent.bind( this );\r\n\r\n      // Setting default properties before user input is entered\r\n      this.state = {\r\n         cityName : \"\",\r\n         stateName : \"\"\r\n      }\r\n   }\r\n\r\n   // Function for when user enters city name into form\r\n   onChangeCityName( event ) {\r\n      this.setState( {\r\n         cityName : event.target.value\r\n      });\r\n   }\r\n\r\n   // Function for when user enters state name into form\r\n   onChangeStateName( event ) {\r\n      this.setState( {\r\n         stateName: event.target.value\r\n      });\r\n   }\r\n\r\n   // Function for handling event order after form is submitted\r\n   handleSubmitEvent( event ) {\r\n      // Prevents page from reloading immediately after submission\r\n      event.preventDefault();\r\n\r\n      // Variable for holding city name entered by user\r\n      var cityName = this.state.cityName;\r\n      var stateName = this.state.stateName;\r\n\r\n      // Call function to get weather information for given city \r\n      getWeatherForCity( cityName, stateName );\r\n\r\n      // Set form back to default values\r\n      this.setState({\r\n         cityName: \"\",\r\n         stateName: \"\"\r\n      })\r\n   }\r\n\r\n   // Renders the form that the user sees\r\n   render() {\r\n      return (\r\n          <div style={{marginTop: 10}}>\r\n              <h1> Daily Forecast </h1>\r\n              <form onSubmit={this.handleSubmitEvent}>\r\n                  <div className=\"enter-field\">\r\n                      <label> Enter city: </label>\r\n                      <input type=\"text\" \r\n                             className=\"form-control\"\r\n                             value={this.state.cityName}\r\n                             onChange={this.onChangeCityName}\r\n                             placeholder=\"Enter city name here\" />\r\n                     <input type=\"text\" \r\n                             className=\"form-control\"\r\n                             value={this.state.stateName}\r\n                             onChange={this.onChangeStateName}\r\n                             placeholder=\"Enter state name here\" />\r\n                  </div>\r\n                  <div className=\"submit-field\">\r\n                     <input type=\"submit\" value=\"Submit\" className=\"submit-button\" />\r\n                  </div>\r\n                  <div id=\"mainContainer\">\r\n                     <table className=\"table\" style={{marginTop: 20 }}>\r\n                        <thead>\r\n                           <tr>\r\n                              <th> City: </th>\r\n                              <td id=\"cityCell\" colSpan=\"6\"> </td>\r\n                           </tr>\r\n                           <tr>\r\n                              <th> Weather </th>\r\n                              <th> Temperature </th>\r\n                              <th> Humidity </th>\r\n                              <th> Wind </th>\r\n                              <th> Feels Like </th>\r\n                              <th> Pressure </th>\r\n                              <th> Visibility </th>\r\n                           </tr>\r\n                           <tr>\r\n                              <td id=\"imageId\" rowSpan=\"2\"> </td>\r\n                              <td id=\"tempCell\" >  </td>\r\n                              <td id=\"humidityCell\" > </td>\r\n                              <td id=\"windCell\" > </td>\r\n                              <td id=\"feelsLikeCell\" > </td>\r\n                              <td id=\"pressureCell\" > </td>\r\n                              <td id=\"visibilityCell\" > </td>\r\n                           </tr>\r\n                           <tr>\r\n                              <td id=\"currentForecast\" colSpan=\"6\" > </td>\r\n                           </tr>\r\n                        </thead>\r\n                     </table>\r\n                  </div>\r\n              </form>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\n// Function for fetching weather information for given city from API\r\nfunction getWeatherForCity( city, state ) {\r\n   // Try to send fetch request to openweather API, catch any errors\r\n   try {\r\n      // Create XMLHttpRequest \r\n      var xhr = new XMLHttpRequest();\r\n      var key = process.env.REACT_APP_API_KEY;\r\n\r\n      xhr.open(\"GET\", \r\n              \"https://api.openweathermap.org/data/2.5/weather?q=\" + city + \",\" + state + \"&appid=\" + key + \"&units=imperial\",\r\n              true );\r\n\r\n      // Return city information\r\n      xhr.onreadystatechange = function(){\r\n          if(this.readyState === 4 && this.status === 200){\r\n              var json = JSON.parse(this.responseText);\r\n              console.log( json );\r\n\r\n              // Get the cells in the table and populate them with data from the API response\r\n              document.getElementById( \"cityCell\" ).innerHTML = city + \", \" + state;\r\n              document.getElementById( \"tempCell\" ).innerHTML = json.main.temp + \"°F\";\r\n              document.getElementById( \"humidityCell\" ).innerHTML = json.main.humidity + \"%\";\r\n              document.getElementById( \"windCell\" ).innerHTML = json.wind.speed + \" mph\";\r\n              document.getElementById( \"feelsLikeCell\" ).innerHTML = json.main.feels_like + \"°F\";\r\n              document.getElementById( \"pressureCell\" ).innerHTML = pressureConverter( json.main.pressure );\r\n              document.getElementById( \"visibilityCell\" ).innerHTML = visibilityConverter( json.visibility );\r\n              document.getElementById( \"imageId\" ).innerHTML = '<img src=\"http://openweathermap.org/img/wn/' + json.weather[0].icon + '@2x.png\" />';\r\n              document.getElementById( \"currentForecast\" ).innerHTML = json.weather[0].description.charAt(0).toUpperCase() + json.weather[0].description.slice( 1 ) + \" currently.\";\r\n          }\r\n      }\r\n\r\n      // Send out XMLHttpRequest to openweather API\r\n      xhr.send();\r\n   }\r\n   catch( error ) {\r\n      console.log( \"An error has occurred!\" );\r\n   }\r\n}\r\n\r\n// Helper function for converting atmospheric pressure from hpa to inHg\r\nfunction pressureConverter( pressure ) {\r\n   // Actual conversion for hpa to inHg\r\n   var pressureInHg = pressure * 0.02953;\r\n   // Taking that conversion and rounding it to two places after the decimal\r\n   pressureInHg = ( Math.round( pressureInHg * 100 ) ) / 100.0;\r\n   // Returing that value for display purposes\r\n   return pressureInHg + \" inHg\";\r\n}\r\n\r\n// Helper function for converting meters to miles for visibility field\r\nfunction visibilityConverter( value ) {\r\n   // Actual conversion for meters to miles\r\n   var visibility = value * 0.00062137119223733;\r\n   // Taking that conversion and rounding it to two decimal places\r\n   visibility = ( Math.round( visibility * 100 ) ) / 100.0;\r\n   // Returning that value for display purposes\r\n   return visibility + \" mi\";\r\n}\r\n\r\n\r\n","/* This page will display the temperature and weather icon for the week */\r\n\r\n// Import statements\r\nimport React, { Component } from 'react';\r\nimport \"./components.css\";\r\n\r\n// Main class for fetching weather info from API and displaying it to user\r\nexport default class weatherPageWeek extends Component {\r\n   \r\n   // Constructor for the class that handles resetting default values after form submition\r\n   constructor( props ) {\r\n      super( props );\r\n\r\n      // Event handling functions\r\n      this.onChangeCityName = this.onChangeCityName.bind( this );\r\n      this.onChangeStateName = this.onChangeStateName.bind( this );\r\n      this.handleSubmitEvent = this.handleSubmitEvent.bind( this );\r\n\r\n      // Setting default properties before user input is entered\r\n      this.state = {\r\n         cityName : \"\",\r\n         stateName : \"\"\r\n      }\r\n   }\r\n\r\n   // Function for when user enters city name into form\r\n   onChangeCityName( event ) {\r\n      this.setState( {\r\n         cityName : event.target.value\r\n      });\r\n   }\r\n\r\n   // Function for when user enters state name into form\r\n   onChangeStateName( event ) {\r\n      this.setState( {\r\n         stateName: event.target.value\r\n      });\r\n   }\r\n\r\n   // Function for handling event order after form is submitted\r\n   handleSubmitEvent( event ) {\r\n      // Prevents page from reloading immediately after submission\r\n      event.preventDefault();\r\n\r\n      // Variable for holding city name entered by user\r\n      var cityName = this.state.cityName;\r\n      var stateName = this.state.stateName;\r\n\r\n      // Call function to get weather information for given city \r\n      getCity( cityName, stateName );\r\n\r\n      // Set form back to default values\r\n      this.setState({\r\n         cityName: \"\",\r\n         stateName: \"\"\r\n      })\r\n   }\r\n\r\n   // Renders the form that the user sees\r\n   render() {\r\n      return (\r\n          <div style={{marginTop: 10}}>\r\n              <h1> Weekly Forecast </h1>\r\n              <form onSubmit={this.handleSubmitEvent}>\r\n                  <div className=\"enter-field\">\r\n                      <label> Enter city: </label>\r\n                      <input type=\"text\" \r\n                             className=\"form-control\"\r\n                             value={this.state.cityName}\r\n                             onChange={this.onChangeCityName}\r\n                             placeholder=\"Enter city name here\" />\r\n                     <input type=\"text\" \r\n                             className=\"form-control\"\r\n                             value={this.state.stateName}\r\n                             onChange={this.onChangeStateName}\r\n                             placeholder=\"Enter state name here\" />\r\n                  </div>\r\n                  <div className=\"submit-field\">\r\n                     <input type=\"submit\" value=\"Submit\" className=\"submit-button\" />\r\n                  </div>\r\n                  <div id=\"mainContainer\">\r\n                     <table className=\"table\" style={{marginTop: 20 }}>\r\n                        <thead>\r\n                           <tr>\r\n                              <th> City: </th>\r\n                              <td id=\"cityCell\" colSpan=\"7\"> </td>\r\n                           </tr>\r\n                           <tr>\r\n                              <th> Day: </th>\r\n                              <td id=\"dayOneCell\"> </td>\r\n                              <td id=\"dayTwoCell\"> </td>\r\n                              <td id=\"dayThreeCell\"> </td>\r\n                              <td id=\"dayFourCell\"> </td>\r\n                              <td id=\"dayFiveCell\"> </td>\r\n                              <td id=\"daySixCell\"> </td>\r\n                              <td id=\"daySevenCell\"> </td>\r\n                           </tr>\r\n                           <tr>\r\n                              <th> Temperature: </th>\r\n                              <td id=\"dayOneTempCell\"> </td>\r\n                              <td id=\"dayTwoTempCell\"> </td>\r\n                              <td id=\"dayThreeTempCell\"> </td>\r\n                              <td id=\"dayFourTempCell\"> </td>\r\n                              <td id=\"dayFiveTempCell\"> </td>\r\n                              <td id=\"daySixTempCell\"> </td>\r\n                              <td id=\"daySevenTempCell\"> </td>\r\n                           </tr>\r\n                           <tr>\r\n                              <th> Weather: </th>\r\n                              <td id=\"dayOneWeatherCell\"> </td>\r\n                              <td id=\"dayTwoWeatherCell\"> </td>\r\n                              <td id=\"dayThreeWeatherCell\"> </td>\r\n                              <td id=\"dayFourWeatherCell\"> </td>\r\n                              <td id=\"dayFiveWeatherCell\"> </td>\r\n                              <td id=\"daySixWeatherCell\"> </td>\r\n                              <td id=\"daySevenWeatherCell\"> </td>\r\n                           </tr>\r\n                        </thead>\r\n                     </table>\r\n                  </div>\r\n              </form>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\n// Function for fetching information for given city from API -- upload to GitHub when returning unless there's more to add -- nothing more for now at least -- DELETE THIS COMMENT BEFORE UPLOADING\r\nfunction getCity( city, state ) {\r\n   // Try to send fetch request to openweather API, catch any errors\r\n   try {\r\n      // Create XMLHttpRequest \r\n      var xhr = new XMLHttpRequest();\r\n      var key = process.env.REACT_APP_API_KEY;\r\n\r\n      xhr.open(\"GET\", \r\n              \"https://api.openweathermap.org/data/2.5/weather?q=\" + city + \",\" + state + \"&appid=\" + key + \"&units=imperial\",\r\n              true );\r\n\r\n      // Return city information\r\n      xhr.onreadystatechange = function(){\r\n          if(this.readyState === 4 && this.status === 200){\r\n              var json = JSON.parse(this.responseText);\r\n              \r\n              // Display name and state of city to page\r\n              document.getElementById( \"cityCell\" ).innerHTML = city + \", \" + state;\r\n\r\n              // Store latitude and longitude of given city\r\n              var lat = json.coord.lat;\r\n              var lon = json.coord.lon;\r\n\r\n              // Function that makes call to API for weekly data using latitude and longitude of given city\r\n              weeklyCall( lat, lon );\r\n          }\r\n      }\r\n\r\n      // Send out XMLHttpRequest to openweather API\r\n      xhr.send();\r\n   }\r\n   catch( error ) {\r\n      console.log( \"An error has occurred!\" );\r\n   }\r\n}\r\n\r\nfunction weeklyCall( lat, lon ) {\r\n   // Try to send fetch request to openweather API, catch any errors\r\n   try {\r\n      // Create XMLHttpRequest \r\n      var xhr = new XMLHttpRequest();\r\n      var key = process.env.REACT_APP_API_KEY;\r\n\r\n      // Only want daily weather info, so exclude all other calls\r\n      xhr.open(\"GET\", \r\n              \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + lat + \"&lon=\" + lon + \"&exclude=current,minutely,hourly&appid=\" + key + \"&units=imperial\",\r\n              true );\r\n\r\n      // Return city information\r\n      xhr.onreadystatechange = function(){\r\n          if(this.readyState === 4 && this.status === 200){\r\n              var json = JSON.parse(this.responseText);\r\n \r\n              // Get dates from API and display to page\r\n              document.getElementById( \"dayOneCell\" ).innerHTML = epochConverter( json.daily[1].dt );\r\n              document.getElementById( \"dayTwoCell\" ).innerHTML = epochConverter( json.daily[2].dt );\r\n              document.getElementById( \"dayThreeCell\" ).innerHTML = epochConverter( json.daily[3].dt );\r\n              document.getElementById( \"dayFourCell\" ).innerHTML = epochConverter( json.daily[4].dt );\r\n              document.getElementById( \"dayFiveCell\" ).innerHTML = epochConverter( json.daily[5].dt );\r\n              document.getElementById( \"daySixCell\" ).innerHTML = epochConverter( json.daily[6].dt );\r\n              document.getElementById( \"daySevenCell\" ).innerHTML = epochConverter( json.daily[7].dt );\r\n\r\n              // Get temperatures from API for given days and display to page\r\n              document.getElementById( \"dayOneTempCell\" ).innerHTML = json.daily[1].temp.day + \"°F\";\r\n              document.getElementById( \"dayTwoTempCell\" ).innerHTML = json.daily[2].temp.day + \"°F\";\r\n              document.getElementById( \"dayThreeTempCell\" ).innerHTML = json.daily[3].temp.day + \"°F\";\r\n              document.getElementById( \"dayFourTempCell\" ).innerHTML = json.daily[4].temp.day + \"°F\";\r\n              document.getElementById( \"dayFiveTempCell\" ).innerHTML = json.daily[5].temp.day + \"°F\";\r\n              document.getElementById( \"daySixTempCell\" ).innerHTML = json.daily[6].temp.day + \"°F\";\r\n              document.getElementById( \"daySevenTempCell\" ).innerHTML = json.daily[7].temp.day + \"°F\";\r\n\r\n              // Get weather icons from API for given days and display to page\r\n              document.getElementById( \"dayOneWeatherCell\" ).innerHTML = '<img src=\"http://openweathermap.org/img/wn/' + json.daily[1].weather[0].icon + '@2x.png\" />';\r\n              document.getElementById( \"dayTwoWeatherCell\" ).innerHTML = '<img src=\"http://openweathermap.org/img/wn/' + json.daily[2].weather[0].icon + '@2x.png\" />';\r\n              document.getElementById( \"dayThreeWeatherCell\" ).innerHTML = '<img src=\"http://openweathermap.org/img/wn/' + json.daily[3].weather[0].icon + '@2x.png\" />';\r\n              document.getElementById( \"dayFourWeatherCell\" ).innerHTML = '<img src=\"http://openweathermap.org/img/wn/' + json.daily[4].weather[0].icon + '@2x.png\" />';\r\n              document.getElementById( \"dayFiveWeatherCell\" ).innerHTML = '<img src=\"http://openweathermap.org/img/wn/' + json.daily[5].weather[0].icon + '@2x.png\" />';\r\n              document.getElementById( \"daySixWeatherCell\" ).innerHTML = '<img src=\"http://openweathermap.org/img/wn/' + json.daily[6].weather[0].icon + '@2x.png\" />';\r\n              document.getElementById( \"daySevenWeatherCell\" ).innerHTML = '<img src=\"http://openweathermap.org/img/wn/' + json.daily[7].weather[0].icon + '@2x.png\" />';\r\n          }\r\n      }\r\n\r\n      // Send out XMLHttpRequest to openweather API\r\n      xhr.send();\r\n   }\r\n   catch( error ) {\r\n      console.log( \"An error has occurred!\" );\r\n   }\r\n}\r\n\r\n// Function for converting given epoch time to a readable date\r\nfunction epochConverter( epochTime ) {\r\n   // Multiply given epochTime by 1,000 because Date object uses milliseconds\r\n   var readableDate = new Date( epochTime * 1000 );\r\n   // Split date object on white space \r\n   var date = readableDate.toString().split(/\\s+/);\r\n   console.log( date );\r\n   // Display only day, month, date, and year\r\n   return date[0] + \" \" + date[1] + \" \" + date[2] + \", \" + date[3];\r\n}\r\n\r\n\r\n","// Import statements\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\n// Import components\r\nimport weatherPage from \"./components/weatherPage\";\r\nimport weatherPageWeek from \"./components/weatherPageWeek\";\r\nimport \"./App.css\";\r\n\r\n// Main landing page for app\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"container\">\r\n          <nav className=\"navbar\">\r\n            <div className=\"collapse navbar-collapse\">\r\n              <ul className=\"navbar-nav mr-auto\">\r\n                <li className=\"navbar-item\">\r\n                  <Link to=\"/\" className=\"navbar-item-one\"> Daily Forecast </Link>\r\n                </li>\r\n                <li className=\"navbar-item\">\r\n                  <Link to=\"/weekly\" className=\"navbar-item-two\"> Weekly Forecast </Link>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </nav>\r\n          <br/>\r\n          <Route path=\"/\" exact component={weatherPage} />\r\n          <Route path=\"/weekly\" component={weatherPageWeek} />\r\n        </div>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}